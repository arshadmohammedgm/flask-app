name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/app-flask

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Lint code
        run: |
          pip install flake8
          flake8 app.py

      - name: Extract short SHA
        id: vars
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image
        run: |
          docker build -t $IMAGE_NAME:${{ steps.vars.outputs.short_sha }} .
          docker push $IMAGE_NAME:${{ steps.vars.outputs.short_sha }}

  test:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      SHORT_SHA: ${{ needs.build-and-push.outputs.short-sha }}
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/app-flask
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run container and test /health
        run: |
          docker run -d -p 5000:5000 --name flaskapp $IMAGE_NAME:$SHORT_SHA
          sleep 5
          curl --fail http://localhost:5000/health
          docker stop flaskapp
          docker rm flaskapp

  deploy:
    needs: [build-and-push, test]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/app-flask
      SHORT_SHA: ${{ needs.build-and-push.outputs.short-sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig + deploy
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG="$PWD/kubeconfig.yaml"

          kubectl apply -f k8s/configmap.yaml || true
          kubectl apply -f k8s/secret.yaml || true
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/deployment.yaml

          kubectl set image deployment/flask-deployment \
            flask-container=${IMAGE_NAME}:${SHORT_SHA}
          kubectl rollout status deployment/flask-deployment

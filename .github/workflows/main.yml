name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/app-flask

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Lint code with flake8
        run: |
          pip install flake8
          flake8 app.py

      - name: Extract short SHA
        id: vars
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:${{ steps.vars.outputs.short_sha }} .

      - name: Push Docker image
        run: docker push $IMAGE_NAME:${{ steps.vars.outputs.short_sha }}

  test:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      SHORT_SHA: ${{ needs.build-and-push.outputs.short-sha }}
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/app-flask
    steps:
      - name: Log in to Docker Hub (if image is private)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run container and test /health
        run: |
          docker run -d -p 5000:5000 --name flaskapp $IMAGE_NAME:$SHORT_SHA
          sleep 5
          curl --fail http://localhost:5000/health
          docker stop flaskapp
          docker rm flaskapp

  deploy:
    needs: [build-and-push, test]   # <-- include build-and-push so outputs are available
    runs-on: ubuntu-latest
    env:
      SHORT_SHA: ${{ needs.build-and-push.outputs.short-sha }}
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/app-flask
    steps:
      - name: Checkout repo (needed for k8s manifests)
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Kubeconfig and deploy
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          export KUBECONFIG="$PWD/kubeconfig.yaml"

          echo "SHORT_SHA is '${SHORT_SHA}'"
          IMAGE_TAG=${SHORT_SHA:-latest}

          # apply manifests from the checked-out repo
          kubectl apply -f k8s/deployment.yaml

          # update image and wait for rollout
          kubectl set image deployment/flask-deployment flask-container=${IMAGE_NAME}:${IMAGE_TAG}
          kubectl rollout status deployment/flask-deployment
